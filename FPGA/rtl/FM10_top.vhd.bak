
--========================================================================--
--  Sentto Labs Inc.
--  Project         : Max 10 FPGA SG ESC Development Board
--  Description     :
--  Prerequisites   : None
--  Reference       : None
--  Authors         : Teng Wang, project init.
--                  : Hua Chang, BLDC motor controller
--  Version         : 1.0, Feb 20, 2017
--
--========================================================================--

Library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

--use ieee.fixed_pkg.all;
--use ieee.math_real.all;

----------------------------------------------------------------------------

ENTITY SG_ESC_chip_top is port(

    clock_50Mhz: in std_logic;
    led: out std_logic;

    -- ALL USER INTERFACE, VOLTAGE RANGE IS 0~3.3V. NO VOLTAGE HIGHER THAN 3.3V IS ALLOWED
    -- SPI User Interface, can be used as GPIO.
    spiCLK: inout std_logic;
    spiMISO: inout std_logic;
    spiMOSI: inout std_logic;
    spiSS: inout std_logic;

    -- PWM User Interface, can be used as GPIO.
    m1_pwm: inout std_logic;
    m2_pwm: inout std_logic;

    -- Motor 1 control signel
    m1_u_high: out std_logic;  -- motor #1 phase U Hin for driver
    m1_u_low: out std_logic;   -- motor #1 phase U Lin for driver
    m1_v_high: out std_logic;
    m1_v_low: out std_logic;
    m1_w_high: out std_logic;
    m1_w_low: out std_logic;
    m1_adc_SCLK: inout std_logic;
    m1_adc_Dout: inout std_logic;
    m1_adc_Din: inout std_logic;
    m1_adc_CS: inout std_logic;

    -- Motor 2 control signel  -- Installed Driver
    m2_u_high: out std_logic;
    m2_u_low: out std_logic;
    m2_v_high: out std_logic;  -- motor #2 phase V Hin for driver
    m2_v_low: out std_logic;   -- motor #2 phase V Lin for driver
    m2_w_high: out std_logic;
    m2_w_low: out std_logic;
    m2_adc_SCLK: inout std_logic;
    m2_adc_Dout: inout std_logic;
    m2_adc_Din: inout std_logic;
    m2_adc_CS: inout std_logic;

    -- Power
    bat_adc_SCLK: inout std_logic;
    bat_adc_Dout: inout std_logic;
    bat_adc_CS: inout std_logic

);
END SG_ESC_chip_top;

ARCHITECTURE rtl OF SG_ESC_chip_top IS

-----------------------------------------------------------------------------------------
-- Selection of the architecture for the components
-----------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------
-- Signals/variable type declarations
-----------------------------------------------------------------------------------------

signal counter : integer := 0;
signal counter2: integer := 0;

BEGIN


    m2_u_high <= '0';
    m2_u_low  <= '0';
    m2_v_high <= '0';
    m2_v_low  <= '0';
    m2_w_high <= '0';
    m2_w_low  <= '0';

-- === Never assign HIGH for both m1_*_high and m1_*_low ===--	 
    m1_u_high <= '0';
    m1_u_low  <= '0';
    m1_v_high <= '0';
    m1_v_low  <= '0';
    m1_w_high <= '0';
    m1_w_low  <= '0';


--process (clock_50Mhz)
--begin
--    if(clock_50Mhz = '1' AND clock_50Mhz'event) then
--        if(counter2 < 5000) then
--            counter2 <= counter2 + 1;
--            m2_u_high <= '0';
--        elsif (counter2 <10000) then
--            counter2 <= counter2 + 1;
--            m2_u_high <= '1';
--        else
--            counter2 <=0;
--            m2_u_high <= '0';
--        end if;
--    end if;
--end process;
--
--process (clock_50Mhz)
--begin
--    if(clock_50Mhz = '1' AND clock_50Mhz'event) then
--        if(counter2 < 500) then
--            m2_u_low <= '0';
--        elsif(counter2 < 4500) then
--            m2_u_low <= '1';
--        elsif (counter2 <10000) then
--            m2_u_low <= '0';
--        else
--            m2_u_low <= '0';
--        end if;
--    end if;
--end process;




process (clock_50Mhz)
begin
    if (clock_50Mhz = '1' AND clock_50Mhz'event) then
	     if (counter <5000000) then 
		      counter <= counter + 1;
				led <= '1';
		  elsif (counter <10000000) then
		      counter <= counter + 1;
				led <= '0';
		  else
		      counter <= 0;
        end if;
    end if;
end process;



END rtl;
